• How can I ensure that my code, program, or software is functional and secure?
  The way I ensure my code is functional and secure is by utilizing a variety of different tests to analyze it under different lenses. First, when I take time to analyze the program and block out on a white board the direction I believe I need to take it. Next I take that preplanning and beginning coding from there. When it looks like my code is mostly complete I begin static testing it by looking for areas I can refactor to increase efficiency, or may cause stumbling blocks later. When the code looks satisfactory, I begin utilizing dynamic testing through both running the program, and through what I have recently learned, utilizing software tests such as JUnit testing. This dynamic testing allows me to test end cases, test assertions in JUnit, and ensure the user experience is also satisfactory. Other tools I like to utilize during the process include peer review and group code reviews when they are available. Getting multiple eyes on a problem allows you to learn from each other and catch things you may not have caught otherwise.

• How do I interpret user needs and incorporate them into a program?
  The user needs that need to be incorporated into a program, in my mind, come in two separate flavors. As I have seen frequently with my wife, who is a graphic designer, some requests come to you with vague guidelines and it is up to your team to interpret loose rules into something concrete. An example would be a client who wants software to do a function for him, but may not be fluent in exactly how to make that happen and leaves it up to your team. For example in our scenario for the class, they wanted a Contact, Task, and Appointment class written, and had some minimum requirements but no specific way to go about it. In my opinion these clients it is best to fill their requirements and follow best practices to fill in the gaps. Other times, you may have a client who needs a specific task done, in a specific way. Such as a government contract that a very specific requirement for the software that may not necessarily follow best practices. These clients I believe the best way is to follow their design then document and report areas to them that may not be best practice. Whether they take the advice or not is up to them, they may have some legacy code or specific hardware that requires some 'unique' design. In the end though, I believe it is most likely to encounter a mix of these two and will probably have to work somewhere in between.

• How do I approach designing software?
  My approach to designing software has changed greatly as I began learning new techniques and exploring how others approach as well. I used to jump quickly into the code and have to refactor many times as I went along, now though I like to preplan as much as I can in order to get a general sense of the whole problem before I begin. I can best describe this as an overall shift in my headspace of how creating software works. Instead of seeing it as 95% coding, and 5% problem solving, I now see it as a healthy mixture of both. I have found having a white board handy is extremely useful (and even purchased a desk I could write on for that reason) and like to have a solid mind map of where I am going before I start. One of the biggest influences on my process has been Dan Shiffman from the online series 'The Coding Train' who not only does tutorials on specific topics in JS but also explains his mental process as he goes along from white board to coding to optimizing. It has been a wonderful resource and really changed how I approach problems. Ultimately I expect as I learn more and as I eventually transition into the industry my approach will continue to shift and evolve the further as I continue to grow.
