	• Summarize the project and what problem it was solving.
	The scenario for the project is that we were creating the hardware and code for a thermostat utilizing raspberry pi and a breadboard connected to it. Over the course of the class we slowly built more onto it, going from a simple LED we lit up to a fully programmed thermostat that could be adjusted through three buttons and an LCD screen. 
	• What did you do particularly well?
	I feel like I was able to do the code particularly well. I enjoyed learning how to utilize VIM in a Linux environment and to quickly make changes to the code from the Pi itself versus transferring from my usual python IDE of Pycharm. The wiring of the board I also felt I followed along and improvised well, but I didn't enjoy quiet as much because with my glasses I was constantly pulling them up so I could see close up, and putting them on so I could read from my monitor. It was a lot of swapping eye wear to be able to read the small lettering on the board.
	• Where could you improve?
	Being the kind of person who is deeply disturbed by mess, I could have improved the wiring. I kept it loose and untethered so I could adjust as we were building throughout the term, but I was really wanting to just tape like wires together and color code properly. I think if I was working on a personal project I would probably invest in some adjustable cable ties to be able to contain but also adjust later.
	• What tools and/or resources are you adding to your support network?
	From this class, I am adding in VIM to my support network. I had looked at it a little before, and heard it talked about online frequently, but this was the first time it was in front of me and I had no excuse not to give it a real try. After an initial learning curve I felt that, while I may not be a master of vim hot keys, I can manage it well enough to yank around lines of code, quickly skip through the document, and even quit the application! 
	• What skills from this project will be particularly transferable to other projects and/or course work?
	I think learning about state machines and turning code into real tangible results physically in front of us is a skill I will definitely want to take with me into the future. Specifically I am planning to repurpose the Pi into a personal portfolio project after this, because these kind of portfolio projects not just show you know how to code, but also how to generate tangible results from it.
	• How did you make this project maintainable, readable, and adaptable?
	So my usual answer to this question is "Added a ton of comments" because I am the kind of person who prefers over documentation to under documentation, but there were already a ton of comments all throughout the code. I personally feel proper documentation, especially on code that is going to be reviewed by others is one of the most important things you can do. Even if an advanced coder is opening up your work, they are still looking at your code like an outsider visiting a town for the first time. To that analogy you may know your way around quickly because you made the town, but visitors are going to get the bearings quicker from road signs guiding them around at first. 

